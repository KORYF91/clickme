{"version":3,"sources":["components/NumbersCard.js","components/Navigation.js","components/Game.js","App.js","index.js"],"names":["NumbersCard","props","alt","src","image","onClick","handleClick","id","style","width","height","Navigation","class","score","topScore","Game","state","numbers","clickedArr","shuffledata","console","log","i","length","randomNumber","Math","floor","random","temp","handleNumberClick","includes","setState","setTimeout","message","newScore","newTopScore","max","concat","this","Container","Row","Col","map","number","key","img","Component","app","ReactDOM","render","App","document","getElementById"],"mappings":"6VAYeA,EATK,SAAAC,GAChB,OACI,6BACI,yBAAKC,IAAI,IAAIC,IAAKF,EAAMG,MAAOC,QAAS,kBAAMJ,EAAMK,YAAYL,EAAMM,KAAKC,MAAO,CAACC,MAAO,QAASC,OAAQ,aCiBxGC,MApBf,SAAoBV,GAEhB,OACE,6BACE,yBAAKW,MAAM,gCACjB,0BAAMA,MAAM,wBAAZ,mCAEE,0CAAgBX,EAAMY,MAAtB,kBAA4CZ,EAAMa,WAEtD,yBAAKF,MAAM,6BACT,yBAAKA,MAAM,aACT,wBAAIA,MAAM,aAAV,mBACA,uBAAGA,MAAM,QAAT,uL,wBCwEWG,E,2MA9EXC,MAAQ,CACJC,UACAC,WAAY,GACZL,MAAO,EACPC,SAAU,G,EAUdK,YAAc,SAACF,GACbG,QAAQC,IAAIJ,GACZG,QAAQC,IAAI,gBAEV,IADA,IAAIC,EAAIL,EAAQM,OAAQ,EAClBD,EAAE,GAAE,CACN,IAAME,EAAeC,KAAKC,MAAMD,KAAKE,UAAWL,EAAE,IAC5CM,EAAOX,EAAQK,GACrBL,EAAQK,GAAKL,EAAQO,GACrBP,EAAQO,GAAgBI,EACxBN,IAEJ,OAAOL,G,EAEXY,kBAAoB,SAACtB,GAEjB,GADAa,QAAQC,IAAI,WACR,EAAKL,MAAME,WAAWY,SAASvB,GACjC,EAAKwB,SAAS,CACZlB,MAAO,EACPK,WAAY,KAEdc,YAAW,WACT,EAAKD,SAAS,CAACE,QAAS,6BACvB,SACE,CACL,IAAIC,EAAW,EAAKlB,MAAMH,MAAQ,EAC9BsB,EAAcV,KAAKW,IAAIF,EAAU,EAAKlB,MAAMF,UAChD,EAAKiB,SAAS,CACZb,WAAY,EAAKF,MAAME,WAAWmB,OAAO9B,GACzCO,SAAUqB,EACVtB,MAAOqB,IAETd,QAAQC,IAAI,kBAAmB,EAAKL,MAAMF,UAC1CkB,YAAW,WACT,EAAKD,SAAS,CAACE,QAAS,OACvB,KAEL,EAAKd,YAAY,EAAKH,MAAMC,U,mFA3C9BG,QAAQC,IAAIiB,KAAKtB,MAAMC,SACrBqB,KAAKP,SACH,CACEd,QAAQqB,KAAKnB,YAAYmB,KAAKtB,MAAMC,a,+BA0ClC,IAAD,OACL,OACG,oCACI,kBAAC,EAAD,CAAaJ,MAAOyB,KAAKtB,MAAMH,MAAOC,SAAUwB,KAAKtB,MAAMF,WAC3D,6BACE,kBAACyB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACG,kBAACC,EAAA,EAAD,KACGH,KAAKtB,MAAMC,QAAQyB,KAAI,SAAAC,GAAM,OACxB,kBAAC,EAAD,CACIC,IAAKD,EAAOpC,GACZA,GAAIoC,EAAOpC,GACXH,MAAOuC,EAAOE,IACdvC,YAAe,EAAKuB,gC,GAlEnCiB,aCOJC,E,iLATP,OACI,6BAEI,kBAAC,EAAD,W,GALED,a,eCAlBE,EAASC,OAAO,kBAACC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.4c6a4032.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst NumbersCard = props => {\r\n    return (\r\n        <div>\r\n            <img alt=\"g\" src={props.image} onClick={() => props.handleClick(props.id)} style={{width: \"100px\", height: \"100px\"}}/>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NumbersCard;","import React from 'react';\r\n\r\n\r\nfunction Navigation(props) {\r\n\r\n    return (\r\n      <div>\r\n        <nav class=\"navbar navbar-light bg-light\">\r\n  <span class=\"navbar-brand mb-0 h1\">Click ME if your feeling luckly</span>\r\n\r\n    <span> Score : {props.score} | Top Score : {props.topScore}</span>\r\n</nav>\r\n<div class=\"jumbotron jumbotron-fluid\">\r\n  <div class=\"container\">\r\n    <h1 class=\"display-4\">Numbers Memeber</h1>\r\n    <p class=\"lead\">This is a memorey Game. If you click the same image more than once you lose. If you are able to keep clicking a new image every time you win. My the odds ever be in your favor</p>\r\n  </div>\r\n</div>\r\n\r\n</div>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React, { Component } from 'react';\r\nimport numbers from '../numbers.json';\r\nimport NumberCard from './NumbersCard';\r\nimport Navigation from './Navigation.js';\r\nimport { Col } from 'react-bootstrap';\r\nimport { Container } from 'react-bootstrap';\r\nimport { Row } from 'react-bootstrap';\r\n\r\nclass Game extends Component {\r\n    state = {\r\n        numbers,\r\n        clickedArr: [],\r\n        score: 0,\r\n        topScore: 0\r\n    }\r\n    componentDidMount(){\r\n      console.log(this.state.numbers)\r\n        this.setState(\r\n          {\r\n            numbers:this.shuffledata(this.state.numbers)\r\n          }\r\n        )\r\n    }\r\n    shuffledata = (numbers) => {\r\n      console.log(numbers)\r\n      console.log(\"shuffle data\")\r\n        let i = numbers.length -1; //2\r\n        while(i>0){\r\n            const randomNumber = Math.floor(Math.random() *(i+1))//1\r\n            const temp = numbers[i]; //img2\r\n            numbers[i] = numbers[randomNumber]; //\r\n            numbers[randomNumber] = temp;\r\n            i--;\r\n        }\r\n        return numbers\r\n    }\r\n    handleNumberClick = (id) => {\r\n        console.log(\"clicked\")\r\n        if (this.state.clickedArr.includes(id)) {\r\n          this.setState({\r\n            score: 0,\r\n            clickedArr: []\r\n          });\r\n          setTimeout(() => {\r\n            this.setState({message: \"Click an image to Play\"})\r\n          }, 3000)\r\n        } else {\r\n          var newScore = this.state.score + 1;\r\n          var newTopScore = Math.max(newScore, this.state.topScore)\r\n          this.setState({\r\n            clickedArr: this.state.clickedArr.concat(id),\r\n            topScore: newTopScore,\r\n            score: newScore\r\n          });\r\n          console.log(\"new top score: \" +this.state.topScore)\r\n          setTimeout(() => {\r\n            this.setState({message: \"\"})\r\n          }, 3000)\r\n        }\r\n        this.shuffledata(this.state.numbers);\r\n      }\r\n    render() {\r\n        return (\r\n           <>\r\n               <Navigation  score={this.state.score} topScore={this.state.topScore} />\r\n               <div>\r\n                 <Container>\r\n                   <Row>\r\n                      <Col>\r\n                        {this.state.numbers.map(number => (\r\n                              <NumberCard \r\n                                  key={number.id}\r\n                                  id={number.id}\r\n                                  image={number.img}\r\n                                  handleClick = {this.handleNumberClick}\r\n                              />\r\n                          ))}   \r\n                      </Col>\r\n                   </Row>\r\n                 </Container>\r\n               </div>\r\n                      \r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game","import Game from './components/Game';\r\nimport React, { Component } from 'react';\r\n\r\n\r\nclass app extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n                <Game />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default app;","import App from './App';\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n"],"sourceRoot":""}